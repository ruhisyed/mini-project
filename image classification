# -*- coding: utf-8 -*-
"""Image Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/ruhisyed/9d4aed9c6512b3db19f067be72fecaca/-image-classification.ipynb
"""

# Commented out IPython magic to ensure Python compatibility.
!pip install ipython-autotime
# %load_ext autotime

# Data : Images
# 1. Download manually the images from Google
# 2. Download datasets from Kaggle.com
# 3. Build a Image Web Crawler
# 4. use python libraries to scrape the images (using)

! pip install bing-image-downloader

!mkdir images

from bing_image_downloader import downloader
downloader.download("pretty sunflower",limit=30,output_dir='images',
                    adult_filter_off=True)

from bing_image_downloader import downloader
downloader.download("rugby ball leather",limit=30,output_dir='images',
                    adult_filter_off=True)

from bing_image_downloader import downloader
downloader.download("ice cream cone",limit=30,output_dir='images',
                    adult_filter_off=True)

import numpy as np

a= np.array([1,2,3,4,5])
            
          
            
a.ndim

# how do i convert Matrix to vector? - flatten()
a.flatten()

# preprocessing
#1.Resize
#2.Flatten
import os
import matplotlib.pyplot as plt
import numpy as np
from skimage.io import imread
from skimage.transform import resize


target = []
images = []
flat_data = []


DATADIR =('/content/images')

CATEGORIES = ['pretty sunflower','rugby ball leather','ice cream cone']

for category in CATEGORIES:
  class_num = CATEGORIES.index(category) # Label Encoding the values
  path = os.path.join(DATADIR,category)  #create path to use all the images
  for img in os.listdir(path):
    img_array = imread(os.path.join(path,img))
    #print(img_array.shape)
    #plt.imshow(img_array)
    img_resized = resize(img_array,(150,150,3)) #Normalize the value from 0 to 1
    flat_data.append(img_resized.flatten())
    images.append(img_resized)
    target.append(class_num)

flat_data = np.array(flat_data)    
target = np.array(target)
images = np.array(images)

len(flat_data[0])

150*150

target

unique,count= np.unique(target,return_counts=True)
plt.bar(CATEGORIES,count)

# split data into Training and Testing
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(flat_data,target,
                                    test_size=0.3,random_state=109)

from sklearn.model_selection import GridSearchCV
from sklearn import svm
param_grid = [ 
               {'c':[1,10,100,1000],'kernel':['linear']},
               {'c':[1,10,100,1000],'gamma':[0.001,0.0001],'kernel':['rbf']},             
]

svc = svm.SVC(probability=True)              
clf = GridSearchCV(svc,param_grid)
clf.fit(x_train,y_train)

y_pred = clf.predict(x_test)
y_pred

y_test

from sklearn.metrics import accuracy_score,confusion_matrix

accuracy_score(y_pred,y_test)

confusion_matrix(y_pred,y_test)

# save the model using pickle library
import pickle
pickle.dump(clf,open('img_model.p','wb'))

model = pickel.load(open('img_model.p','rb'))

#Testing a brand new Image
flat_data = []
url = input('Enter your URL')
img = imread(url)
img_resized = resize(img,(150,150,3))
flat_data.append(img_resized.flatten())
flat_data = np.array(flat_data)
print(img.shape)
plt.imshow(img_resized)
y_out = model.predict(flat_data)
y_out = CATEGORIES[y_out[0]]
print(f'PREDICTED OUTPUT: {y_out}')

!pip install streamlit

!pip install pyngrok
from pyngrok import ngrok

from skimage.transform import resize
import pickle
from PIL import Image
st.set_option('deprecation.showfileuploaderEncoding',False)
st.title('Image Classifer using Machine Learning')
st.text('Upload the Image')

model = pickle.load(open('img_model.p','rb'))

Uploaded_file = st.file_uploader("choose an image...", type="jpg")
if Uploaded_file is not None:
  img = Image.open(Uploaded_file)
  st.image(img,caption='Uploaded Image')

  if st.button('PREDICT'):
    CATEGORIES = ['pretty sunflower','rugby ball leather','ice cream cone']

    st.write('Result...')
    flat_data=[]
    img = np.array(img)
     img_resized = resize(img,(150,150,3))
flat_data.append(img_resized.flatten())
flat_data = np.array(flat_data)
print(img.shape)
plt.imshow(img_resized)
y_out = model.predict(flat_data)
y_out = CATEGORIES[y_out[0]]
print(f'PREDICTED OUTPUT: {y_out}')

# Deployment :
# 1. WebPage - HTML/CSS/JS - Flask/Django
# 2. WebApp - Streamlit/Dash
# 3.Mobile App - Kotlin/Java

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# st.title('Image Classifier using Machine Learning')
#

!nohup streamlit run app.py &

url = ngrok.connect(port='8501')
url

# AWS
# Azure
# GCP
# Heroku - Free Platform for deploying
    
